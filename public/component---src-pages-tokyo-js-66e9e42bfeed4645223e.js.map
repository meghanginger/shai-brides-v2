{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/components/Tokyo.js","webpack:///./src/pages/tokyo.js"],"names":["SEO","description","lang","meta","title","site","metaDescription","siteMetadata","htmlAttributes","name","content","property","author","concat","defaultProps","Tokyo","Fragment","className","text-align","loop","width","muted","autoplay","src","contentURLs","video","type","Album","alt","SpotifyPlayer","link","joieQuotes","map","quote","id","TokyoDrift","bgColour"],"mappings":"8JAKA,SAASA,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAC9BC,EADuC,OACvCA,KAcFC,EAAkBL,GAAeI,EAAKE,aAAaN,YAEzD,OACE,kBAAC,IAAD,CACEO,eAAgB,CACdN,QAEFE,MAAOA,EACPD,KAAM,CACJ,CACEM,KAAK,cACLC,QAASJ,GAEX,CACEK,SAAS,WACTD,QAASN,GAEX,CACEO,SAAS,iBACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASL,EAAKE,aAAaK,QAE7B,CACEH,KAAK,gBACLC,QAASN,GAEX,CACEK,KAAK,sBACLC,QAASJ,IAEXO,OAAOV,KAKfH,EAAIc,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD,Q,4DC1CAe,EA/BD,kBACN,kBAAC,IAAD,KACI,kBAAC,IAAMC,SAAP,KACI,wBAAIC,UAAU,mCAAd,eACA,yBAAKA,UAAU,aACX,2BAAOC,aAAW,SAASC,MAAI,EAACC,MAAM,OAAOC,OAAK,EAACC,SAAS,WAAWL,UAAU,aACzE,4BAAQM,IAAKC,IAAYT,MAAMU,MAAOC,KAAK,gBAGvD,yBAAKT,UAAU,mCACX,yBAAKA,UAAU,2CACX,yBAAKA,UAAU,mDACX,yBAAKM,IAAKC,IAAYT,MAAMY,MAAOC,IAAI,GAAGX,UAAU,cACpD,kBAACY,EAAA,EAAD,CAAeZ,UAAU,gBAAgBa,KAAK,WAElD,yBAAKb,UAAU,6CACVc,EAAWC,KAAI,SAAAC,GAAK,OACjB,yBAAKhB,UAAU,eAAeiB,GAAID,EAAMA,OACpC,gCAASA,EAAMA,MAAf,KACA,4BAAKA,EAAMrB,cAM3B,wBAAIK,UAAU,SAAd,0CCjBLkB,UARI,kBACf,kBAAC,IAAMnB,SAAP,KACI,kBAAC,EAAD,CAAKZ,MAAM,8BACX,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAQgC,SAAS","file":"component---src-pages-tokyo-js-66e9e42bfeed4645223e.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Helmet from \"react-helmet\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang\n      }}\n      title={title}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription\n        },\n        {\n          property: `og:title`,\n          content: title\n        },\n        {\n          property: `og:description`,\n          content: metaDescription\n        },\n        {\n          property: `og:type`,\n          content: `website`\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author\n        },\n        {\n          name: `twitter:title`,\n          content: title\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription\n        }\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired\n};\n\nexport default SEO;\n","import React from \"react\";\nimport Layout from \"./layout\";\nimport SpotifyPlayer from \"./SpotifyPlayer\";\nimport contentURLs from \"../data/content-cdn\";\nimport joieQuotes from \"../data/joieQuotes\";\n\nconst Tokyo = () => (\n        <Layout>\n            <React.Fragment>\n                <h1 className=\"joieHeader is-black-bg is-white\">TOKYO DRIFT</h1>\n                <div className=\"joieVideo\">\n                    <video text-align=\"middle\" loop width=\"200%\" muted autoplay=\"autoplay\" className=\"joieVideo\">\n                            <source src={contentURLs.Tokyo.video} type=\"video/mp4\" />\n                    </video>\n                </div>\n                <div className=\"is-light-blue-bg joieContentDiv\">\n                    <div className=\"is-light-blue-bg container row override\" >\n                        <div className=\"col-sm-4 col-md-5 col-xs-12 imageSpotifyWrapper\">\n                            <img src={contentURLs.Tokyo.Album} alt=\"\" className=\"joieImage\"/>\n                            <SpotifyPlayer className=\"spotifyPlayer\" link=\"tokyo\" />\n                        </div>\n                        <div className=\"col-sm-8 col-md-7 col-xs-12 quotesWrapper\">\n                            {joieQuotes.map(quote => (\n                                <div className=\"quoteWrapper\" id={quote.quote}>\n                                    <h5>{`\"${quote.quote}\"`}</h5>\n                                    <h6>{quote.author}</h6>\n                                </div>\n                            ))}\n                \n                        </div>\n                    </div>\n                    <h3 className=\"pad-1\" >OUT NOW ON ALL STREAMING PLATFORMS</h3>\n                </div>\n            </React.Fragment>\n        </Layout>\n    )\n\nexport default Tokyo;","import React from 'react';\nimport SEO from \"../components/SEO\";\nimport Footer from \"../components/footer\";\nimport Tokyo from \"../components/Tokyo\";\n\n\nconst TokyoDrift = () => (\n    <React.Fragment>\n        <SEO title=\"TOKYO DRIFT | SHAI BRIDES\" />\n        <Tokyo />\n        <Footer bgColour='dark-blue'/>\n    </ React.Fragment>\n)\n\nexport default TokyoDrift;"],"sourceRoot":""}